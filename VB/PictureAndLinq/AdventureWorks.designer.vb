'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace PictureAndLinq


	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")> _
	Partial Public Class AdventureWorksDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertProductPhoto(ByVal instance As ProductPhoto)
	End Sub
	Partial Private Sub UpdateProductPhoto(ByVal instance As ProductPhoto)
	End Sub
	Partial Private Sub DeleteProductPhoto(ByVal instance As ProductPhoto)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(My.Settings.Default.AdventureWorksConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property ProductPhotos() As System.Data.Linq.Table(Of ProductPhoto)
			Get
				Return Me.GetTable(Of ProductPhoto)()
			End Get
		End Property
	End Class

	<Table(Name:="Production.ProductPhoto")> _
	Partial Public Class ProductPhoto
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductPhotoID As Integer

		Private _ThumbNailPhoto As System.Data.Linq.Binary

		Private _ThumbnailPhotoFileName As String

		Private _LargePhoto As System.Data.Linq.Binary

		Private _LargePhotoFileName As String

		Private _ModifiedDate As System.DateTime

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductPhotoIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductPhotoIDChanged()
	End Sub
	Partial Private Sub OnThumbNailPhotoChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnThumbNailPhotoChanged()
	End Sub
	Partial Private Sub OnThumbnailPhotoFileNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnThumbnailPhotoFileNameChanged()
	End Sub
	Partial Private Sub OnLargePhotoChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnLargePhotoChanged()
	End Sub
	Partial Private Sub OnLargePhotoFileNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLargePhotoFileNameChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			OnCreated()
		End Sub

		<Column(Storage:="_ProductPhotoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductPhotoID() As Integer
			Get
				Return Me._ProductPhotoID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductPhotoID <> value) Then
					Me.OnProductPhotoIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductPhotoID = value
					Me.SendPropertyChanged("ProductPhotoID")
					Me.OnProductPhotoIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ThumbNailPhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)> _
		Public Property ThumbNailPhoto() As System.Data.Linq.Binary
			Get
				Return Me._ThumbNailPhoto
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._ThumbNailPhoto IsNot value) Then
					Me.OnThumbNailPhotoChanging(value)
					Me.SendPropertyChanging()
					Me._ThumbNailPhoto = value
					Me.SendPropertyChanged("ThumbNailPhoto")
					Me.OnThumbNailPhotoChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ThumbnailPhotoFileName", DbType:="NVarChar(50)")> _
		Public Property ThumbnailPhotoFileName() As String
			Get
				Return Me._ThumbnailPhotoFileName
			End Get
			Set(ByVal value As String)
				If (Me._ThumbnailPhotoFileName <> value) Then
					Me.OnThumbnailPhotoFileNameChanging(value)
					Me.SendPropertyChanging()
					Me._ThumbnailPhotoFileName = value
					Me.SendPropertyChanged("ThumbnailPhotoFileName")
					Me.OnThumbnailPhotoFileNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_LargePhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)> _
		Public Property LargePhoto() As System.Data.Linq.Binary
			Get
				Return Me._LargePhoto
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._LargePhoto IsNot value) Then
					Me.OnLargePhotoChanging(value)
					Me.SendPropertyChanging()
					Me._LargePhoto = value
					Me.SendPropertyChanged("LargePhoto")
					Me.OnLargePhotoChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_LargePhotoFileName", DbType:="NVarChar(50)")> _
		Public Property LargePhotoFileName() As String
			Get
				Return Me._LargePhotoFileName
			End Get
			Set(ByVal value As String)
				If (Me._LargePhotoFileName <> value) Then
					Me.OnLargePhotoFileNameChanging(value)
					Me.SendPropertyChanging()
					Me._LargePhotoFileName = value
					Me.SendPropertyChanged("LargePhotoFileName")
					Me.OnLargePhotoFileNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'TODO: INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
